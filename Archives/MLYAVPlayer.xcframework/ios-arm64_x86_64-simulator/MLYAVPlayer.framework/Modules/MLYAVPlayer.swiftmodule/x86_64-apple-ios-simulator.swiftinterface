// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MLYAVPlayer
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Foundation
@_exported import MLYAVPlayer
import MLYSDK
import MUXSDKStats
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @objcMembers public class ImageCache {
  @objc public func getImage(url: Foundation.URL, retryCount: Swift.Int = 3, completion: @escaping (UIKit.UIImage?) -> ())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MLYAVPlayer : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var playerViewController: AVKit.AVPlayerViewController!
  @objc @_Concurrency.MainActor(unsafe) public var videoURl: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var thumbnailsImagePage: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var thumbnailsUrl: Swift.String! {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var viewController: UIKit.UIViewController!
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, url: Swift.String? = nil, thumbnailsUrl: Swift.String? = nil)
  @objc deinit
}
extension MLYAVPlayer.MLYAVPlayer {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func play()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pause()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func fastForward(_ seconds: Swift.Double = 10)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func rewind(_ seconds: Swift.Double = 10)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func snapshot() -> UIKit.UIImage?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deView()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func replaceCurrentItem(playerItem: AVFoundation.AVPlayerItem)
}
extension MLYAVPlayer.MLYAVPlayer : MLYAVPlayer.MLYPreviewViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onProgressBarDragEnded(sender: UIKit.UISlider, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onProgressBarTouchUpOutside(sender: UIKit.UISlider, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onProgressBarSlideValueChanged(sender: UIKit.UISlider, thumbnailImageView: UIKit.UIImageView, thumbnailX: CoreFoundation.CGFloat, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onCurrentPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onBufferPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
}
extension MLYAVPlayer.MLYAVPlayer : MLYAVPlayer.MLYPreviewViewClickListener {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onClick(sender: UIKit.UIView?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYAVPlayerPlugin : ObjectiveC.NSObject {
  @objc public var playWhenReady: Swift.Bool
  @objc public var isMonitorAllowed: Swift.Bool
  @objc public var targetLatency: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var maxLatency: Swift.Double
  @objc public func catchUp()
  @objc public func adapt(_ playerViewController: AVKit.AVPlayerViewController)
  @objc public func deactivate()
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYPlayerManger : ObjectiveC.NSObject {
  @objc public func view() -> UIKit.UIView
  @objc public func src(_ src: Swift.String)
  @objc public func play()
  @objc public func controls(_ controls: Swift.Bool)
  @objc public func autoplay(_ autoplay: Swift.Bool)
  @objc public func muted(_ muted: Swift.Bool)
  @objc public func play(src: Swift.String)
  @objc public func pause()
  @objc public func stop()
  @objc public func setLatency(_ latency: Swift.Double)
  @objc public func isMonitorAllowed(_ isMonitorAllowed: Swift.Bool)
  @objc public func isLoaderAllowed(_ isLoaderAllowed: Swift.Bool)
  public static func initialize(_ clientID: Swift.String, _ server: Swift.String?, _ debug: Swift.Bool?) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum PlayerImageStringEnum : Swift.String {
  case PAUSE
  case PLAY
  case ZOOM
  case MUTE_OFF
  case MUTE_ON
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PlayerImageIntEnum : Swift.Int {
  case PLAY
  case ZOOM
  case MUTE_OFF
  case MUTE_ON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MLYPreviewViewDelegate {
  @objc func onProgressBarDragEnded(sender: UIKit.UISlider, progress: Swift.Float)
  @objc func onProgressBarTouchUpOutside(sender: UIKit.UISlider, progress: Swift.Float)
  @objc func onProgressBarSlideValueChanged(sender: UIKit.UISlider, thumbnailImageView: UIKit.UIImageView, thumbnailX: CoreFoundation.CGFloat, progress: Swift.Float)
  @objc func onCurrentPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
  @objc func onBufferPositionUpdate(sender: UIKit.UISlider, progress: Swift.Float)
}
@objc public protocol MLYPreviewViewClickListener {
  @objc func onClick(sender: UIKit.UIView?)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class MLYPreviewView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any MLYAVPlayer.MLYPreviewViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var onClickListener: (any MLYAVPlayer.MLYPreviewViewClickListener)?
  @objc @_Concurrency.MainActor(unsafe) public var playImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var muteImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var zoomImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var autoPlay: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var progressValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var remainingPlaybackValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var progressBufferValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var progressMaximumValue: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var showsPlaybackControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var autoHidePlaybackControlsTimeInterval: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func seekTo(value: Swift.Float)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addOnClickListener(target: Swift.AnyObject, action: ObjectiveC.Selector)
  @_Concurrency.MainActor(unsafe) public func parentViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func getImagePath() -> Foundation.Bundle?
}
extension MLYAVPlayer.PlayerImageStringEnum : Swift.Equatable {}
extension MLYAVPlayer.PlayerImageStringEnum : Swift.Hashable {}
extension MLYAVPlayer.PlayerImageStringEnum : Swift.RawRepresentable {}
extension MLYAVPlayer.PlayerImageIntEnum : Swift.Equatable {}
extension MLYAVPlayer.PlayerImageIntEnum : Swift.Hashable {}
extension MLYAVPlayer.PlayerImageIntEnum : Swift.RawRepresentable {}
